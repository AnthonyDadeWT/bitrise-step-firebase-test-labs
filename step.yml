#
# A couple of useful guides & docs:
#
# - Main Bitrise CLI docs: https://github.com/bitrise-io/bitrise/tree/master/_docs
# - Step Development Guideline: https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
# - Bitrise.yml format spec: https://github.com/bitrise-io/bitrise/blob/master/_docs/bitrise-yml-format-spec.md
# - Bitrise docs: http://devcenter.bitrise.io/
# - Bitrise CLI guides: http://devcenter.bitrise.io/bitrise-cli/

title: |-
  [Beta] Flutter Device Testing
summary: |
  [Beta] Automatic deployment of iOS and Android Flutter Integration tests, executed through Firebase Test Labs 
description: |-
  [Beta] Automatic deployment of iOS and Android Flutter Integration test, executed through Firebase Test Labs 

  This step allows you to automate the process of deploying integration tests to be run on **physical devices** on Firebase Test Labs.
  
  Before using this step, ensure to go through the following setup required: 

  **Project Setup**

  - 1) [Setup a Firebase project for your app](https://firebase.google.com/docs/flutter/setup?platform=android)

  - 2) [Setup a Service Account for your Firebase project](https://firebase.google.com/support/guides/service-accounts)
  
  - 3) [Project Setup to test your app on virtual devices](https://github.com/flutter/flutter/tree/main/packages/integration_test#android-device-testing)

  **How to use this step properly**

  Before using this step you must generate the required artifacts this Step uses.

  - **iOS** Before running this Step in your workflow you must generate a .ipa and .xctestrun to deploy. Follow these steps to do so:

  1) Add the [Flutter Build](https://bitrise.io/integrations/steps/flutter-build) Step to your workflow.
  Configure this step by editing the following:

    - Under iOS Platform Configs category, for additional parameters ensure to keep --release and add the path to the integration tests you'd like to compile, for example:
    "--release integration_test/test.dart"

  2) After the Flutter Build Step, add the [Xcode Build for testing for iOS](https://bitrise.io/integrations/steps/xcode-build-for-test#:~:text=The%20Step%20runs%20Xcode's%20xcodebuild,xctestrun%20file.) Step to your workflow.
  Configure this step by editing the following:

    - Change the project path to ./ios/Runner.xcworkspace (assuming your Flutter project is at the root level)
    - Ensure your Build Configuration and Scheme is correct. Set Scheme to "Runner", and Build Configuration to "Release" for default projects
    - Under the xcodebuild configuration category, change the Build settings (xcconfig) to ./ios/Flutter/Release.xcconfig
  
  - **Android** Before running this Step in your workflow you must generate an APK and testAPK deploy. 

  **Extra information** 

  - **NOTE**: To run your project's tests on an iOS device on Firebase Test Labs you must properly 
  codesign your app in the workflow before this step is run. [The documentation can be found here](https://devcenter.bitrise.io/en/code-signing/ios-code-signing/managing-ios-code-signing-files---automatic-provisioning.html)

  - If you would not like to follow the documentation's guidance on using automatic code signing, you could also choose
  to upload a proper provisioning profile for your iOS application to the Code Signing & Files tab in the workflow editor
  on Bitrise. Then, add the "Certificate and profile installer" step (without editing the configuration) to your 
  workflow before this step is run.

  - To save build credits and time, this step runs the firebase test command with the --async flag, so the command can 
  be run without waiting for test results to come back. This is not to be confused with the timeout input below.

  Related Steps

  - [Flutter Build](https://bitrise.io/integrations/steps/flutter-build)
  
website: https://github.com/AnthonyDadeWT/bitrise-step-firebase-test-labs
source_code_url: https://github.com/AnthonyDadeWT/bitrise-step-firebase-test-labs
support_url: https://github.com/AnthonyDadeWT/bitrise-step-firebase-test-labs/issues

# If this step should be available only for certain project types
# just uncomment this `project_type_tags` section and include all the
# project types supported by the step. If the step can be used for all
# project types then you can just remove this section.
# If no `project_type_tags` specified (or specified as an empty array)
# that means the step can be used for any project type.
# You can find more information about project type tags in the Step Development Guideline:
# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
#
project_type_tags:
  - flutter
  - ios
  - android

# Type tags are used for categorizing steps, for easier step discovery in Step Libraries.
# You can find more information about type tags in the Step Development Guideline:
# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
type_tags:
  - test
  - deploy

# These properties define whether a Step is run in a given Workflow or not.
# You can find more information about this in the documentation here:
# https://devcenter.bitrise.io/en/steps-and-workflows/developing-your-own-bitrise-step/developing-a-new-step.html#setting-conditions-for-running-the-step
#
# is_always_run: false
# is_skippable: false
# run_if: ""

# Use the `deps` property to declare dependencies that you can fetch from an OS dependency manager.
# You can find more information about this in the documentation here:
# https://devcenter.bitrise.io/en/steps-and-workflows/developing-your-own-bitrise-step/developing-a-new-step.html#submodules-and-step-dependencies
#
# deps:
#   brew:
#   - name: cmake
#   apt_get:
#   - name: cmake

deps:
  brew:
  - name: google-cloud-sdk
  - name: flutter

is_always_run: false
is_skippable: false
run_if: ""

toolkit:
  bash:
    entry_file: step.sh


inputs:
- service_account_credentials_file: 
  opts:
    title: "Service Account Credentials File"
    summary: |
      The path or HTTP URL to your [service account](https://firebase.google.com/docs/app-distribution/android/distribute-gradle#authenticate_using_a_service_account) private key JSON file.
    description: |
      Follow the [documentation](https://firebase.google.com/docs/app-distribution/android/distribute-gradle#authenticate_using_a_service_account) to setup a service account.

      You can avoid pushing this JSON file to your repository by storing the JSON contents as a secret, then in a custom script,
      create a new file, and echo the contents of that secret into the file, and then set this input to that file path.
    is_required: true
    is_sensitive: true
- project_id: 
  opts:
    title: "Firebase Project ID"
    summary: |
      Firebase Project ID. Can be found in the Firebase console, under the project name in Project settings.
    description: |
      Note: this is NOT an App ID. There should only be one Project ID for your entire Firebase project, even if it includes multiple "apps".
    is_required: true
    is_sensitive: true
- integration_test_path: 
  opts:
    title: Path to Integration Tests
    summary: |
      Path to integration test file to be sent to Firebase. example: integration_test/foo.dart
    description: |
    is_required: true
- locale: en_US
  opts:
    title: Locale / Language
    summary: |
      Specify the Locale to test on, set to English by default
      [List of locales](https://help.sap.com/docs/SAP_BUSINESSOBJECTS_BUSINESS_INTELLIGENCE_PLATFORM/09382741061c40a989fae01e61d54202/46758c5e6e041014910aba7db0e91070.html)
    is_required: true
- orientation: portrait
  opts:
    title: Orientation
    summary: Specify the device orientation 
    is_required: true
- timeout: 15m
  opts:
    title: Timeout
    summary: Set a maximum time limit on how long your tests run for
    description: |
      The max time this test execution can run before it is cancelled (default: 15m). 
      It does not include any time necessary to prepare and clean up the target device. 
      The maximum possible testing time is 45m on physical devices and 60m on virtual devices
      The timeout units can be h, m, or s. If no unit is given, seconds are assumed. 
      Examples: 1h is 1 hour, 200s is 200 seconds, 15m is 15 minutes
    is_required: true
- test_ios: "false"
  opts:
    title: "Run Tests on iOS Device?"
    value_options:
    - "true"
    - "false"
    summary: |
      If you'd like to run your tests on an iOS device, set this to true. Otherwise set it to false
- test_android: "true"
  opts:
    title: "Run Tests on Android Device?"
    value_options:
    - "true"
    - "false"
    summary: |
      If you'd like to run your tests on an Android device, set this to true. Otherwise set it to false
- build_flavor:
  opts:
    title: Build Flavor
    summary: |
      Specify a specific build flavor you'd like to use to build your project.
    description: |
      This should only be used on projects that have already setup flavors, and you use --flavor <flavor> to build or run your project.
      https://docs.flutter.dev/deployment/flavors
    is_required: false
- firebase_additional_flags:
  opts:
    title: Additional Firebase Flags
    summary: |
      Additional flags to be appended to the Firebase command: gcloud firebase test (platform) run
    description: |
      Make sure to include the -- when adding in additional flags to this input i.e. --flag value --flag value ...
    is_required: false

## iOS Configuration Category ##
- simulator_model: iphone11pro
  opts:
    category: iOS Configuration
    title: Simulator
    summary: Specify the simulator Test Labs uses to run your tests [Firebase Documentation](https://firebase.google.com/docs/test-lab/android/available-testing-devices)
    description: |
      NOTE: This input is dependent on the available devices Test Labs has available for you to use
      with the operating system you'll select below. [Firebase Documentation](https://firebase.google.com/docs/test-lab/android/available-testing-devices)
    is_required: true
- deployment_target: "16.6"
  opts:
    category: iOS Configuration
    title: iOS Deployment Target
    summary: Specify the iOS version of the device
    description: |
      NOTE: This input is dependent on the available operating system Test Labs has available for you to use
      with the device you've selected above. [Documentation](https://firebase.google.com/docs/test-lab/android/available-testing-devices)
    is_required: true
- ios_configuration: Release
  opts:
    category: iOS Configuration
    title: Xcode Build Configuration
    summary: |-
      Xcode Build Configuration.
    description: |
      If not specified, the default Build Configuration will be used.
      Use xcodebuild -list to see available configurations for your project.
      The input value sets xcodebuild's `-configuration` option.
    is_required: true
- scheme: Runner
  opts:
    category: iOS Configuration
    title: Schema
    summary: Specify an Xcode Schema you'd like to use for iOS 
    description: |
      Specify an Xcode Schema you'd like to use for iOS 
      Run xcodebuild -list in the iOS directory to list available schemes for your project
      By default, this is set to Runner

      example: Runner, dev, release, etc
    is_required: true
- output_path: ../build/ios_integ
  opts:
    category: iOS Configuration
    title: Output Path
    summary: The path to the folder where the iOS integration executable will output
    is_required: true
- product_path: $BITRISE_TEST_BUNDLE_PATH
  opts:
    category: iOS Configuration
    title: Product Path
    summary: "The path to the zip folder containing a .xctestrun and a folder containing the .app to be deployed"
    is_required: true
- workspace: Runner.xcworkspace
  opts:
    category: iOS Configuration
    title: xcworkspace File
    summary: Specify the iOS workspace
    is_required: true
- config_file_path: Flutter/Release.xcconfig
  opts:
    category: iOS Configuration
    title: Path to .xcconfig
    summary: The path that points to the .xcconfig you'd like to use
    is_required: true
- dev_target: "16.4"
  opts:
    category: iOS Configuration
    title: Development Target
    summary: Specify a development target
    description: |
      The name of the test runner will be “Runner_iphoneos$dev_target-arm64.xctestrun”, 
      where the value of “dev_target” may vary based on the Xcode version.
    is_required: true
- xcodebuild_additional_flags:
  opts:
    title: Additional xcodebuild Flags
    category: iOS Configuration
    summary: |
      Additional flags to be appended to the xcodebuild command
    description: |
      Make sure to include the -- when adding in additional flags to this input i.e. --flag value --flag value ...
    is_required: false

## Android Configuration Category ##
- android_apk_path: build/app/outputs/apk/debug/app-debug.apk
  opts:
    category: Android Configuration
    title: App APK Path
    summary: The path to the APK of your app
    description: |
      If you use a build flavor, don't worry about modifying this path as this Step will handle the inclusion of build flavors
      to the path automatically
    is_required: true
- android_test_apk_path: build/app/outputs/apk/androidTest/debug/app-debug-androidTest.apk
  opts:
    category: Android Configuration
    title: androidTest App APK Path
    summary: The path to the Test APK of your app
    description: |
      If you use a build flavor, don't worry about modifying this path as this Step will handle the inclusion of build flavors
      to the path automatically
    is_required: true
- android_device_model_id: redfin
  opts:
    category: Android Configuration
    title: Device Model ID
    summary: Specify the Model ID of the Firebase Test Labs Device - [Firebase Documentation](https://firebase.google.com/docs/test-lab/android/available-testing-devices)
    description: |
      NOTE: This input is dependent on the available devices Test Labs has available for you to use
      with the operating system you'll select below. [Firebase Documentation](https://firebase.google.com/docs/test-lab/android/available-testing-devices)

      Run gcloud firebase test android models list to see all available devices.
      **NOTE: For physical devices, you must use the MODEL_ID** 
    is_required: true
- android_version: 30
  opts:
    category: Android Configuration
    title: Android API Version
    summary: Specify the Android API version for the device above - [Firebase Documentation](https://firebase.google.com/docs/test-lab/android/available-testing-devices)
    description: |
      NOTE: This input is dependent on the available operating system Test Labs has available for you to use
      with the device you've selected above. [Firebase Documentation](https://firebase.google.com/docs/test-lab/android/available-testing-devices)
    is_required: true
      
      

outputs:
- EXAMPLE_STEP_OUTPUT:
  opts:
    title: "Example Step Output"
    summary: Summary. No more than 2-3 sentences.
    description: |
      Description of this output.

      Can be Markdown formatted text.



##

##- example_step_input: 
##    opts:
 ####      summary: Summary. No more than 2-3 sentences.
##      description: |
##        Description of this input.

##        Can be Markdown formatted text.
##      is_expand: true
###      value_options: []

###